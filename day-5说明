目的:把一个函数映射为一个URL处理函数
def get(path):    #先定义@get()
    '''
    Define decorator @get('/path')
    '''
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            return func(*args, **kw)
        wrapper.__method__ = 'GET'
        wrapper.__route__ = path
        return wrapper
    return decorator


@get('/')
async def index(request):
    users = await User.findAll()
    return {
        '__template__': 'test.html',
        'users': users
}







from urllib.parse import urlparse
from urllib.parse import parse_qs
print(dir(urlparse))
url='http://www.baidu.com/index.php?username=guol&param2=4'
def qs(url):
    query = urlparse(url).query
    print(parse_qs(query))  #{'username': ['guol'], 'param2': ['4']}
    print(parse_qs(query).items()) #dict_items([('username', ['guol']), ('param2', ['4'])])
    return dict([(k,v[0]) for k,v in parse_qs(query).items()]) 
print(qs(url))

for k,v in [(1,"1"),(2,"2")]:
    print(k,v)


Tornado与网络相关的所有内容:


Application类实际是一些Handler的集合.
URL处理函数,就叫handler。

文章中  定义	 是一个逻辑处理函数

对于__call__
对象通过提供__call__(slef, [,*args [,**kwargs]])方法可以模拟函数的行为，如果一个对象x提供了该方法，就可以像函数一样使用它，也就是说x(arg1, arg2...) 等同于调用x.__call__(self, arg1, arg2) 。
request??
https://aiohttp.readthedocs.io/en/stable/web_reference.html#aiohttp.web.Request
You should never create the Request instance manually – aiohttp.web does it for you

最简单的例子
from aiohttp import web

async def handle(request):
    name = request.match_info.get('name', "Anonymous")
    text = "Hello, " + name
    return web.Response(text=text)

app = web.Application()
app.router.add_get('/', handle)
app.router.add_get('/{name}', handle)

web.run_app(app)

什么是application:
Application contains a router instance and a list of callbacks that will be called during application finishing.


RequestHandler的作用: 封装URL处理函数
class RequestHandler(object):
    def __init__(self, app, fn):   #app是一个application的对象, fn 是url处理函数
        self._app = app
        self._func = fn
        ...

    @asyncio.coroutine
    def __call__(self, request): # 像使用函数一样,使用类 创建类实例时,可以使用: class(参数)
        kw = ... 获取参数
        r = yield from self._func(**kw)
        return r   # 返回了url处理函数的结果

再写一个函数,作用:确定url处理函数是否启用.
def add_route(app, fn):
    method = getattr(fn, '__method__', None)
    path = getattr(fn, '__route__', None)
    if path is None or method is None:
        raise ValueError('@get or @post not defined in %s.' % str(fn))
    if not asyncio.iscoroutinefunction(fn) and not inspect.isgeneratorfunction(fn):
        fn = asyncio.coroutine(fn)
    logging.info('add route %s %s => %s(%s)' % (method, path, fn.__name__, ', '.join(inspect.signature(fn).parameters.keys())))
    app.router.add_route(method, path, RequestHandler(app, fn))   #启用

add_route(method, path, handler, *, name=None, expect_handler=None)

add_route单独处理url函数,麻烦,写一个函数add_routes,自动把handler模块的所有符合条件的函数注册了:
def add_routes(app, module_name):
    n = module_name.rfind('.')
    if n == (-1):
        mod = __import__(module_name, globals(), locals())
    else:
        name = module_name[n+1:]
        mod = getattr(__import__(module_name[:n], globals(), locals(), [name]), name)
    for attr in dir(mod):
        if attr.startswith('_'):
            continue
        fn = getattr(mod, attr)
        if callable(fn):
            method = getattr(fn, '__method__', None)
            path = getattr(fn, '__route__', None)
            if method and path:
                add_route(app, fn)

怎么使用这么好的函数add_routes呢
app = web.Application(loop=loop, middlewares=[
    logger_factory, response_factory
])
init_jinja2(app, filters=dict(datetime=datetime_filter))
add_routes(app, 'handlers')
add_static(app)

第二部分middleware ，预处理url
@asyncio.coroutine
def logger_factory(app, handler):
    @asyncio.coroutine
    def logger(request):
        # 记录日志:
        logging.info('Request: %s %s' % (request.method, request.path))
        # 继续处理请求:
        return (yield from handler(request))

    return logger


https://docs.python.org/3/library/inspect.html#inspect.Signature
 from inspect import Parameter
from inspect import signature
>>> def foo(a, b, *, c, d=10):
>>> signature(foo)
<Signature (a, b, *, c, d=10)>
>>> signature(foo).parameters   #
mappingproxy(OrderedDict([('a', <Parameter "a">), ('b', <Parameter "b">), ('c', <Parameter "c">), ('d', <Parameter "d=10">)]))

>>> signature(foo).parameters.items()
odict_items([('a', <Parameter "a">), ('b', <Parameter "b">), ('c', <Parameter "c">), ('d', <Parameter "d=10">)])


>>> def foo(a, b, *, c, d=10):
...     pass

>>> sig = signature(foo)
>>> for param in sig.parameters.values():
...     if (param.kind == param.KEYWORD_ONLY and  #KEYWORD_ONLY 取 * or *arg 后的参数
...                        param.default is param.empty):
...         print('Parameter:', param)
Parameter: c

-----------------------------说明--------------------
def get_required_kw_args(fn):   #获取函数的参数
    args = []
    params = inspect.signature(fn).parameters   # params的类型  <class 'mappingproxy'>
    for name, param in params.items():                 #返回list类型,内容为元组
        if param.kind == inspect.Parameter.KEYWORD_ONLY and param.default == inspect.Parameter.empty:
            args.append(name)  #保存key的值，该key没有value
    return tuple(args)   #args变成元组

def get_named_kw_args(fn):  #获取函数的参数，判断是否有key

def has_var_kw_arg(fn):   # 判断是否有类似 **arges 的形参


------------------------------------------------------

>>> def foo(a, b, *, c, d=10):
...  print(a,b,c)
...
>>> foo(1,2,c=5)
1 2 5

The args and kwargs properties can be used to invoke functions:
def test(a, *, b):
    ...

sig = signature(test)
ba = sig.bind(10, b=20)
test(*ba.args, **ba.kwargs)




The C10K problem 如何处理高并发链接
IO - 同步，异步，阻塞，非阻塞


